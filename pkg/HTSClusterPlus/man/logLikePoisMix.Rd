% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logLikePoisMix.R
\name{logLikePoisMix}
\alias{logLikePoisMix}
\title{Log likelihood calculation for a Poisson mixture model}
\usage{
logLikePoisMix(y, mean, pi)
}
\arguments{
\item{y}{(\emph{n} x \emph{q}) matrix of observed counts for \emph{n}
observations and \emph{q} variables}

\item{mean}{List of length \emph{K} containing the (\emph{n} x \emph{q})
matrices of conditional mean expression for all observations, as calculated
by the \code{\link{PoisMixMean}} function, where \emph{K} represents the
number of clusters}

\item{pi}{Vector of length \emph{K} containing estimate for
\eqn{\hat{\ensuremath\boldsymbol{\pi}}}{\hat{\pi}}}
}
\value{
\item{ll }{Log-likelihood}
\item{ll_obs }{Per-observation log-likelihood}
}
\description{
Function to calculate the log likelihood for a Poisson mixture model.
}
\details{
The \code{logLikePoisMix} function
(taken largely from the \code{mylogLikePoisMix} function from the
\code{poisson.glm.mix} R package) calculates the log likelihood for a given
set of parameters in a Poisson mixture model and is used in the
\code{\link{PoisMixClus_K}} function for the calculation of the BIC and ICL.
}
\examples{
set.seed(12345)

## Simulate data as shown in Rau et al. (2011)
## Library size setting "A", low cluster separation
## n = 200 observations

simulate <- PoisMixSim(n = 200, libsize = "A", separation = "low")
y <- simulate$y
conds <- simulate$conditions
w <- rowSums(y)               ## Estimate of w
r <- table(conds)             ## Number of replicates per condition
d <- length(unique(conds))    ## Number of conditions
s <- colSums(y) / sum(y)      ## TC estimate of lib size
s.dot <- rep(NA, d)           ## Summing lib size within conditions
for(j in 1:d) s.dot[j] <- sum(s[which(conds == unique(conds)[j])]);

## Initial guess for pi and lambda
g.true <- 4
pi.guess <- simulate$pi
## Recalibrate so that (s.dot * lambda.guess) = 1
lambda.sim <- simulate$lambda
lambda.guess <- matrix(NA, nrow = d, ncol = g.true)
for(k in 1:g.true) {
    tmp <- lambda.sim[,k]/sum(lambda.sim[,k])
    lambda.guess[,k] <- tmp/s.dot
}

## Run the PMM model for K = 4
## with EM algorithm and "TC" library size parameter
run <- PoisMixClus_K(y, K = 4, norm = "TC", conds = conds)
pi.est <- run$pi
lambda.est <- run$lambda

## Mean values for each of the parameter sets
mean.guess <- PoisMixMean(y, 4, conds, s, lambda.guess)
mean.est <- PoisMixMean(y, 4, conds, s, lambda.est)

## Difference in log likelihoods
LL.guess <- logLikePoisMix(y, mean.guess, pi.guess)
LL.est <- logLikePoisMix(y, mean.est, pi.est)
## Difference in log likelihoods       
LL.diff <- logLikePoisMixDiff(y, mean.guess, pi.guess, mean.est, pi.est)
}
\author{
Andrea Rau <\url{andrea.rau@jouy.inra.fr}>
}
\references{
Loader, C. (2000) Fast and accurate computation of binomial probabilities.
Available at
\url{http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf}.

Rau, A., Maugis-Rabusseau, C., Martin-Magniette, M.-L., Celeux, G. (2015)
Co-expression analysis of high-throughput transcriptome sequencing data with
Poisson mixture models. Bioinformatics, doi: 10.1093/bioinformatics/btu845.

Rau, A., Celeux, G., Martin-Magniette, M.-L., Maugis-Rabusseau, C. (2011)
Clustering high-throughput sequencing data with Poisson mixture models.
Inria Research Report 7786. Available at
\url{http://hal.inria.fr/inria-00638082}.
}
\seealso{
\code{\link{PoisMixClus_K}} for Poisson mixture model estimation and
model selection; \code{\link{PoisMixMean}} to calculate the per-cluster
conditional mean of each observation
}
\keyword{methods}

