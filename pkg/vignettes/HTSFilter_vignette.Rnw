%\VignetteIndexEntry{HTSFilter Vignette}
%\VignetteKeyword{RNA-seq data}
%\VignetteKeyword{differential analysis}
%\VignetteKeyword{independant filter}
%\VignettePackage{HTSFilter}
\documentclass[12pt,utf8x]{article}

\SweaveOpts{eps=FALSE,echo=TRUE,png=TRUE,pdf=FALSE,figs.only=TRUE}
\usepackage{times}
\usepackage[numbers,sort&compress]{natbib}
\usepackage[colorlinks=TRUE,urlcolor=blue,citecolor=blue]{hyperref}
\usepackage{subfigure}
\usepackage{amsmath}

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}
\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\HTSFilter}{\Rpackage{HTSFilter}}


\textwidth=6.2in
\textheight=8.5in
\oddsidemargin=0.2in
\evensidemargin=0.2in
\headheight=0in
\headsep=0in

\begin{document}

\title{HTSFilter: Independent data-based filtering for replicated high-throughput sequencing experiments
}
\author{Andrea Rau, M{\'e}lina Gallopin, Gilles Celeux, Florence Jaffr{\'e}zic}
\date{Modified: October 29, 2012.   Compiled: \today}
\maketitle

<<echo=FALSE>>=
options(width=60)
@ 

\begin{abstract}
This vignette illustrates the use of the \Rpackage{HTSFilter} package to filter replicated data from high-throughput sequencing experiments (e.g., RNA sequencing data) for three different data classes: matrix, \Rclass{CountDataSet} (the S4 class associated with the \Rpackage{DESeq} package), and \Rclass{DGEList} (the S3 class associated with the \Rpackage{edgeR} package). 
\end{abstract}

\tableofcontents

%--------------------------------------------------
\section{Introduction} \label{sec:intro}
%--------------------------------------------------
 
High-throughput sequencing (HTS) data, such as RNA-sequencing (RNA-seq) data, are increasingly used to conduct differential analyses, in which gene-by-gene statistical tests are performed in order to identify genes whose expression levels show systematic covariation with a particular condition, such as a treatment or phenotype of interest. Because hypothesis tests are performed for gene-by-gene differential analyses, the obtained $p$-values must be adjusted to correct for multiple testing. However, procedures to adjust $p$-values to control the number of detected false positives often lead to a loss of power to detect truly differentially expressed (DE) genes due to the large number of hypothesis tests performed. To reduce the impact of such procedures, independent data filters are often used to identify and remove genes that appear to generate an uninformative signal \cite{Bourgon2010}; this in turn moderates the correction needed to adjust for multiple testing. For independent filtering methods for microarray data, see for example the \Rpackage{genefilter} Bioconductor package \cite{Gentleman}.

The \Rpackage{HTSFilter} package implements a novel independent filtering procedure based on the calculation of a similarity index among biological replicates for read counts arising from replicated high-throughput sequencing data; see \cite{Rau2012a} for additional details. This technique provides an intuitive data-driven way to filter high-throughput sequencing data and to effectively remove genes with low, constant expression levels without incorrectly removing those that would otherwise have been identified as DE. The three fundamental assumptions of the filter implemented in the \Rpackage{HTSFilter} package are as follows: 
\begin{enumerate}
\item Biological replicates are present for each experimental condition,
\item Data can be appropriately normalized (scaled) to correct for systematic inter-sample biases, and
\item Within a given condition, after controlling for inter-sample biases, each gene exhibits similar expression levels among replicates.
\end{enumerate}

For more information about between-sample normalization strategies, see \cite{Dillies2012}; in particular, strategies for normalizing data with differences in library size and composition may be found in \cite{Anders2010} and \cite{Robinson2010}, and strategies for normalizing data exhibiting sample-specific biases due to GC content may be found in \cite{Risso2011} and \cite{Hansen2012}. Within the \Rpackage{HTSFilter} package, the Trimmed Means of M-values (TMM) \cite{Robinson2010} and DESeq \cite{Anders2010} normalization strategies may be used prior to calculating an appropriate data-based filter. If an alternative normalization strategy is needed or desired, the normalization may be applied prior to filtering the data with \texttt{normalization="none"} in the \Rfunction{HTSFilter} function; see Section~\ref{sec:EDAseqnorm} for an example.

The \Rpackage{HTSFilter} package is able to accommodate unnormalized or normalized replicated count data in the form of a matrix (in which each row corresponds to a biological feature and each column to a biological sample), a \Rclass{CountDataSet} (the S4 class associated with the \Rpackage{DESeq} package), and a \Rclass{DGEList} (the S3 class associated with the \Rpackage{edgeR} package), as illustrated in the following sections.

%--------------------------------------------------
\section{Input data} \label{sec:prep}
%--------------------------------------------------

For the purposes of this vignette, we make use of data from a study of sex-specific expression of liver cells in human. Sultan et al. \cite{Sultan2008} obtained a high-throughput sequencing data (using a 1G Illumina Genome Analyzer sequencing machine) from a human embryonic kidney and a B cell line, with two biological replicates each. The raw read counts and phenotype tables were obtained from the ReCount online resource \cite{Frazee2011}.

To begin, we load the \Rpackage{HTSFilter} package, and attach the gene-level count data contained in \Robject{sultan}:

<<loadingPackages>>=
library(HTSFilter)
data("sultan")
pData(sultan)
dim(sultan)
@

The unfiltered data contain 9010 genes in four samples.


%--------------------------------------------------
\section{Matrix class} \label{sec:matrix}
%--------------------------------------------------

To filter high-throughput sequencing data in the form of a matrix, we first access the expression data, contained in \Robject{exprs(sultan)}, and create a vector identifying the condition labels for each of the samples via the \Rcode{pData} Biobase function. We then filter the data using the \Rfunction{HTSFilter} function, specifying that the number of tested thresholds be only 25 (\Rcode{s.len=25}) rather than the default value of 100 to reduce computation time for this example. Note that as it is unspecified, the default normalization method is used for filtering the data, namely the Trimmed Mean of M-values (TMM) method of Robinson and Oshlack. To use the DESeq normalization method \cite{Anders2010}, \Rcode{normalization="DESeq"} may be specified.

<<matrix, fig=TRUE, include=FALSE>>=
mat <- exprs(sultan)
conds <- pData(sultan)$cell.line
filter <- HTSFilter(mat, conds, s.len=25)
mat <- filter$filteredData
dim(mat)
dim(filter$removedData)
@

\begin{figure}[t!]
\centering
\includegraphics[width = .65\textwidth]{HTSFilter_vignette-matrix.png}
\caption{Global Jaccard index for the \Robject{sultan} data calculated for a variety of threshold values after TMM normalization \cite{Robinson2010}, with a loess curve (blue line) superposed and data-based threshold values (red cross and red dotted line) equal to 11.764.\label{fig1}}
\end{figure}

The proposed filter thus removes 4015 genes from further analyses, leaving 4995 genes. We note that an important part of the filter proposed in the \Rpackage{HTSFilter} package is a check of the behavior of the global similarity index calculated over a range of threshold values, and in particular, to verify that a maximum is reached for the global similarity index over the range of tested threshold values (see Figure~\ref{fig1}). For this example, we find a data-based threshold equal to 11.764; genes with normalized values less than this threshold in all samples are filtered from subsequent analyses. 


%--------------------------------------------------
\section{S4 class \Rclass{CountDataSet} (\Rpackage{DESeq} package)} \label{sec:cds}
%--------------------------------------------------

To filter high-throughput sequencing data in the form of a \Rclass{CountDataSet} (the class used within the \Rpackage{DESeq} pipeline for differential analysis), we coerce \Robject{sultan} into an object of the class \Rclass{CountDataSet}. Once again, we specify that the number of tested thresholds be only 25 (\Rcode{s.len=25}) rather than the default value of 100 to reduce computation time for this example. In addition, we specify that the normalization strategy to be used is \Rcode{normalization="DESeq"}. 

<<cds, fig=TRUE, include=FALSE, eval=FALSE>>=
library(DESeq)
cds <- newCountDataSet(exprs(sultan), conds)
filter <- HTSFilter(counts(cds), conds, s.len=25, normalization = "DESeq")
cds <- newCountDataSet(filter$filteredData, conds)
dim(cds)
dim(filter$removedData)
class(cds)
@

\begin{figure}[t!]
\centering
\includegraphics[width = .65\textwidth]{HTSFilter_vignette-cds.png}
\caption{Global Jaccard index for the \Robject{sultan} data calculated for a variety of threshold values after DESeq normalization \cite{Anders2010}, with a loess curve (blue line) superposed and data-based threshold values (red cross and red dotted line) equal to 10.429.\label{fig2}}
\end{figure}

As the normalization strategy used here was slightly different, the proposed filter now removes 3867 genes from further analyses, leaving 5143 genes. Again we verify the behavior of the global similarity index calculated over a range of threshold values (see Figure~\ref{fig2}). For this example, we find a data-based threshold equal to 10.429; genes with normalized values less than this threshold in all samples are filtered from subsequent analyses.

Typically, the next step would be to perform a differential analysis using the \Rpackage{DESeq} pipeline, namely by estimating the size factors of the filtered data (\Rfunction{estimateSizeFactors}), estimating the per-gene and fitted dispersions (\Rfunction{estimateDispersions}), and performing an exact test (\Rfunction{nbinomTest}) to identify differentially expressed genes. 

<<cds.DE>>=
## Not run:
## cds <- estimateSizeFactors(cds)
## cds <- estimateDispersions(cds)
## res <- nbinomTest(cds, "treated", "untreated")
@

%--------------------------------------------------
\section{S3 class \Rclass{DGEList} (\Rpackage{edgeR} package)} \label{sec:dge}
%--------------------------------------------------

To filter high-throughput sequencing data in the form of a \Rclass{DGEList} (the class used within the \Rpackage{edgeR} pipeline for differential analysis), we first coerce the data into the appropriate class with the function \Rfunction{DGEList}, where the \texttt{group} variable is set to contain a vector of condition labels for each of the samples. We then apply the filter using the \Rfunction{HTSFilter} function, again specifying that the number of tested thresholds be only 25 (\Rcode{s.len=25}) rather than the default value of 100. Note that as it is unspecified, the default normalization method is used for filtering the data, namely the Trimmed Mean of M-values (TMM) method \cite{Robinson2010}. We suppress the plot of the global Jaccard index using \Rcode{plot = FALSE}, as it is identical to that shown in Figure~\ref{fig1}.

<<dge>>=
dge <- DGEList(counts=exprs(sultan), group=conds)
filter <- HTSFilter(dge, s.len=25, plot=FALSE)
dge <- filter$filteredData
dim(dge)
dim(filter$removedData)
class(dge)
@

Note that the filtered data are of the same class as the original data, \Rclass{DGEList}, and that library sizes have been re-estimated after filtering the data using the TMM method. Typically, the next step would be to perform a differential analysis using the \Rpackage{edgeR} pipeline, namely by estimating common (\Rfunction{estimateCommonDisp}) and per-gene dispersions (\Rfunction{estimateTagwiseDisp}), and performing an exact test (\Rfunction{exactTest}) to identify differentially expressed genes. 

<<dge.DE>>=
## Not run:
## dge <- estimateCommonDisp(dge)
## dge <- estimateTagwiseDisp(dge)
## res <- exactTest(dge)
@

%%--------------------------------------------------
%\section{S4 class \Rclass{SeqExpressionSet} (\Rpackage{EDAseq} package)} \label{sec:ses}
%%--------------------------------------------------
%
%\subsection{Using default normalization methods}
%
%To filter high-throughput sequencing data in the form of a \Rclass{SeqExpressionSet} (the class used within the \Rpackage{EDAseq} pipeline for exploratory analysis and normalization), we first create a new object of the appropriate class with the function \Rfunction{newSeqExpressionSet}. We then apply the filter using the \Rfunction{HTSFilter} function, again specifying that the number of tested thresholds be only 25 (\Rcode{s.len=25}) rather than the default value of 100. Note that as it is unspecified, the default normalization method is used for filtering the data, namely the Trimmed Mean of M-values (TMM) method \cite{Robinson2010}. We suppress the plot of the global Jaccard index using \Rcode{plot=FALSE}, as it is identical to that shown in Figure~\ref{fig1}.
%
%<<ses>>=
%ses <- newSeqExpressionSet(counts(pasillaGenes), 
%       phenoData = phenoData(pasillaGenes))
%filter <- HTSFilter(ses, conds, s.len=25, plot=FALSE)
%ses <- filter$filteredData
%dim(ses)
%dim(filter$removedData)
%class(ses)
%@
%
%\begin{figure}[t!]
%\centering
%\includegraphics[width = .65\textwidth]{HTSFilter_vignette-sesfig.png}
%\caption{Mean-variance relationship across all seven samples of the \Robject{pasillaGenes} data after data filtering, where the black line corresponds to the Poisson distribution (equal mean and variance) and the red curve is a loess fit. Plot obtained using the \Rfunction{meanVarPlot} function in the \Rpackage{EDASeq} package.\label{fig3}}
%\end{figure}
%
%Note that the filtered data are of the same class as the original data, \Rclass{SeqExpressionSet}; the various commands included in \Rpackage{EDASeq} may now be applied to this object. As an example, we produce a mean-variance plot of the counts across all samples after filtering the data (Figure~\ref{fig3}).
%<<sesfig, fig = FALSE>>=
%meanVarPlot(ses, log=T)
%@

\section{Alternative normalization using \Rpackage{EDAseq}} \label{sec:EDAseqnorm}

As a final example, we illustrate the use of the \Rpackage{HTSFilter} package with an alternative normalization strategy, namely the full quantile normalization method in the \Rpackage{EDASeq} package; such a step may useful when the TMM or DESeq normalization methods are not appropriate for a given dataset. Once again, we create a new object of the appropriate class with the function \Rfunction{newSeqExpressionSet} and normalize data using the \Rfunction{betweenLaneNormalization} function (with \Rcode{which="full"}) in \Rpackage{EDASeq}.

<<ses2, eval=FALSE>>=
library(EDASeq)
ses <- newSeqExpressionSet(exprs(sultan), 
       phenoData=pData(sultan))
ses.norm <- betweenLaneNormalization(ses, which="full")
@

Subsequently, \Rfunction{HTSFilter} is applied to the normalized data (again using \Rcode{s.len=25}), and the normalization method is set to \Rcode{normalization="none"}. We may then make use of the \Rcode{on} vector in the results, which identifies filtered and unfiltered genes (respectively) with 0 and 1, to identify rows in the original data matrix to be retained.

<<ses3, eval=FALSE>>=
filter <- HTSFilter(exprs(ses.norm), conds, s.len=25, normalization="none", 
          plot=FALSE)
head(filter$on)
ses <- newSeqExpressionSet(exprs(sultan)[which(filter$on == 1),],
     phenoData=phenoData(sultan))
@

%--------------------------------------------------
\section{Session Info}
%--------------------------------------------------
<<sessionInfo>>=
sessionInfo()
@ 

\bibliographystyle{plain}  			% Style BST file
\bibliography{vignette_refs}    	% Bibliography file (usually '*.bib' ) 

\end{document}
